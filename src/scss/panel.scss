@use 'sass:list';

@function opera-gx($what, $comp) {
    @return env(-opera-gx-#{$what}-color-#{$comp});
}

/// @param $what Either "background" or "accent"
/// @param $scale How much to multiply the color by
/// @param $mix-with What color to mix with (usually white or black)
/// @param $mix-amount What percent of the mix color should be in the final product
@function opera-gx-mix($what, $opacity: 1.0, $scale: 1.0) {
    $r: opera-gx($what, "r");
    $g: opera-gx($what, "g");
    $b: opera-gx($what, "b");
    @return rgb(calc($r * $scale) calc($g * $scale) calc($b * $scale) / $opacity);
}

$foreground-color-light: black;
$parameter-a-color-light: rgb(255, 0, 0);
$parameter-b-color-light: rgb(0, 0, 255);
$parameter-c-color-light: rgb(0, 127, 0);
$result-color-light: rgb(230, 127, 0);

$foreground-color-dark: white;
$parameter-a-color-dark: rgb(255, 64, 0);
$parameter-b-color-dark: rgb(0, 127, 255);
$parameter-c-color-dark: rgb(64, 206, 64);
$result-color-dark: rgb(255, 127, 0);

$abc-params-light: $parameter-a-color-light $parameter-b-color-light $parameter-c-color-light;
$abc-params-dark: $parameter-a-color-dark $parameter-b-color-dark $parameter-c-color-dark;

:root {
    @media screen and (prefers-color-scheme: light) {
        --foreground-color: #{$foreground-color-light};
        --parameter-a-color: #{$parameter-a-color-light};
        --parameter-b-color: #{$parameter-b-color-light};
        --parameter-c-color: #{$parameter-c-color-light};
        --result-color: #{$result-color-light};
    }

    @media screen and (prefers-color-scheme: dark) {
        --foreground-color: #{$foreground-color-dark};
        --parameter-a-color: #{$parameter-a-color-dark};
        --parameter-b-color: #{$parameter-b-color-dark};
        --parameter-c-color: #{$parameter-c-color-dark};
        --result-color: #{$result-color-dark};
    }

    --opera-gx-background-color-rgb: env(-opera-gx-background-color-r) env(-opera-gx-background-color-g) env(-opera-gx-background-color-b);
    --opera-gx-background-color: rgb(var(--opera-gx-background-color-rgb));
    --opera-gx-accent-color-rgb: env(-opera-gx-accent-color-r) env(-opera-gx-accent-color-g) env(-opera-gx-accent-color-b);
    --opera-gx-accent-color: rgb(var(--opera-gx-accent-color-rgb));
}

$parameter-a-color: var(--parameter-a-color);
$parameter-b-color: var(--parameter-b-color);
$parameter-c-color: var(--parameter-c-color);
$result-color: var(--result-color);

$foreground-color: var(--foreground-color);
$opera-gx-background-color-rgb: var(--opera-gx-background-color-rgb);
$opera-gx-background-color: var(--opera-gx-background-color);
$opera-gx-accent-color-rgb: var(--opera-gx-accent-color-rgb);
$opera-gx-accent-color: var(--opera-gx-accent-color);

body {
    color: $foreground-color;
    background-color: $opera-gx-background-color;
}

@each $class in "a", "b", "c" {
    .#{$class} {
        color: var(--parameter-#{$class}-color);
    }
}

input,
textarea,
button {
    background-color: $opera-gx-background-color;
    color: $foreground-color;
    width: 100%;
    border: 1px solid $opera-gx-accent-color;
    font-family: monospace;

    &:focus-visible {
        outline: $opera-gx-accent-color solid 1px;
        outline-offset: 0;
    }

    &:disabled,
    &::placeholder {
        color: gray;
    }
}

#notes-section {
    resize: vertical;
    min-height: 2.5rem;
}

label {

    &:has(>input:placeholder-shown) {

        &.a,
        &.b,
        &.c {
            color: gray;
        }
    }

    &:has(textarea, input, button) {
        font-weight: bold;
    }
}

button:not(:disabled) {
    cursor: pointer;
    background-color: opera-gx-mix("accent", 25%);

    &:hover {
        background-color: opera-gx-mix("accent", 50%);
    }

    &:active {
        background-color: opera-gx-mix("accent", 75%);
    }
}

@mixin flex-container($direction: null, $wrap: null) {
    display: flex;
    gap: 1ch;
    flex-flow: $direction $wrap;
}

#abc-container {
    @include flex-container(row, nowrap);

    // Whatever contains each input
    & > label {
        width: 10ch;
    }
}

#abc-calculate-container {
    @include flex-container(column);

    width: min-content;
}

#top-container {
    @include flex-container(column);
}

#results-container {
    font: {
        family: sans-serif;
        size: medium;
    }

    label {
        $half-gap: 0.5rem;
        display: block;
        position: relative;
        left: 0;
        top: 0;
        right: 0;
        height: 2rem;

        margin: {
            top: $half-gap;
            bottom: $half-gap;
        }
    }
}

.result {
    color: $result-color;
}

.dirty {
    outline: 1px dashed gray;
}

table.result[id$="-factors"] {
    margin: 0.5rem 0;

    border: {
        collapse: separate;
        spacing: 2px;
    }

    background-color: rgb($foreground-color, 50%);

    @mixin themed-param-background($color-light, $color-dark, $opacity) {
        @media (prefers-color-scheme: light) {
            border-color: $color-light;
            background-color: rgba($color-light, $opacity);
        }

        @media (prefers-color-scheme: dark) {
            border-color: $color-dark;
            background-color: rgba($color-dark, $opacity);
        }
    }

    th,
    td {
        border: 1px solid opera-gx-mix("background", 1, 5);
        text-align: right;
        padding: 1px 1ch;
    }

    th {
        background-color: opera-gx-mix("background", 1, 2);

        @for $n from 2 through 4 {
            &:nth-child(#{$n}) {
                $light: list.nth($abc-params-light, ($n - 1));
                $dark: list.nth($abc-params-dark, ($n - 1));
                @include themed-param-background($light, $dark, .25);
            }
        }
    }

    td {

        @for $n from 2 through 4 {
            &:nth-child(#{$n}) {
                $light: list.nth($abc-params-light, ($n - 1));
                $dark: list.nth($abc-params-dark, ($n - 1));
                @include themed-param-background($light, $dark, .125);
            }
        }

        color: $foreground-color; // After applying theme
    }

    tr:first-child th:first-child {
        background-color: transparent;
        border: none;
    }
}

@mixin span-column {
    display: inline-flex;
    flex-flow: column nowrap;
    align-items: center;
}

span.column {
    @include span-column;
}

.fraction,
.radical > span {
    @include span-column;

    & > hr {
        width: 100%;
        border-color: $result-color;

        margin: 0;
    }
}

.fraction {
    position: relative;
    top: -0.5rem;
}

.hat {
    @include span-column;

    & > :nth-child(2) {
        margin-top: -1rem;
    }
}

.radical {
    display: inline-flex;
    flex-flow: row nowrap;
    align-items: flex-start;

    & > span > hr {
        margin-top: -2px;
    }
}

.hidden {
    display: none;
}
