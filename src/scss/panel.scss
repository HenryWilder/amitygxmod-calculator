@function opera-gx($what, $comp) {
    @return env(-opera-gx-#{$what}-color-#{$comp});
}

/// @param $what Either "background" or "accent"1
/// @param $scale How much to multiply the color by
/// @param $mix-with What color to mix with (usually white or black)
/// @param $mix-amount What percent of the mix color should be in the final product
@function opera-gx-mix($what, $opacity: 1.0, $scale: 1.0) {
    $r: opera-gx($what, "r");
    $g: opera-gx($what, "g");
    $b: opera-gx($what, "b");
    @return rgb(calc($r * $scale) calc($g * $scale) calc($b * $scale) / $opacity);
}

:root {
    @media screen and (prefers-color-scheme: light) {
        --foreground-color: black;
        --parameter-a-color: rgb(255, 0, 0);
        --parameter-b-color: rgb(0, 0, 255);
        --parameter-c-color: rgb(0, 127, 0);
        --result-color: rgb(255, 127, 0);
    }

    @media screen and (prefers-color-scheme: dark) {
        --foreground-color: white;
        --parameter-a-color: rgb(255, 64, 0);
        --parameter-b-color: rgb(0, 127, 255);
        --parameter-c-color: rgb(64, 206, 64);
        --result-color: rgb(255, 127, 0);
    }

    --opera-gx-background-color-rgb: env(-opera-gx-background-color-r) env(-opera-gx-background-color-g) env(-opera-gx-background-color-b);
    --opera-gx-background-color: rgb(var(--opera-gx-background-color-rgb));
    --opera-gx-accent-color-rgb: env(-opera-gx-accent-color-r) env(-opera-gx-accent-color-g) env(-opera-gx-accent-color-b);
    --opera-gx-accent-color: rgb(var(--opera-gx-accent-color-rgb));
}

$parameter-a-color: var(--parameter-a-color);
$parameter-b-color: var(--parameter-b-color);
$parameter-c-color: var(--parameter-c-color);
$result-color: var(--result-color);

$foreground-color: var(--foreground-color);
$opera-gx-background-color-rgb: var(--opera-gx-background-color-rgb);
$opera-gx-background-color: var(--opera-gx-background-color);
$opera-gx-accent-color-rgb: var(--opera-gx-accent-color-rgb);
$opera-gx-accent-color: var(--opera-gx-accent-color);

body {
    color: $foreground-color;
    background-color: $opera-gx-background-color;
}

@each $class in "a", "b", "c" {
    .#{$class} {
        color: var(--parameter-#{$class}-color);
    }
}

input,
textarea,
button {
    background-color: $opera-gx-background-color;
    color: $foreground-color;
    width: 100%;
    resize: vertical;
    border: 1px solid $opera-gx-accent-color;
    font-family: monospace;

    &:focus-visible {
        outline: $opera-gx-accent-color solid 1px;
        outline-offset: 0;
    }

    &:disabled,
    &::placeholder {
        color: gray;
    }
}

label:has(>input:placeholder-shown) {

    &.a,
    &.b,
    &.c {
        color: gray;
    }
}

button:not(:disabled) {
    cursor: pointer;
    background-color: opera-gx-mix("accent", 25%);

    &:hover {
        background-color: opera-gx-mix("accent", 50%);
    }

    &:active {
        background-color: opera-gx-mix("accent", 75%);
    }
}

#notes-section {
    min-height: 2.5rem;
}

@mixin flex-container($direction: null, $wrap: null) {
    display: flex;
    gap: 1ch;
    flex-flow: $direction $wrap;
}

#abc-container {
    @include flex-container(row, nowrap);

    // Whatever contains each input
    & > label {
        width: 7ch;
    }
}

#abc-calculate-container {
    @include flex-container(column);

    width: min-content;
}

#top-container {
    @include flex-container(column);
}

label:has(textarea, input, button) {
    font-weight: bold;
}

.hidden {
    display: none;
}

output.result {
    color: $result-color;
}

#results-container label {
    display: block;
}

.dirty {
    outline: 1px dashed gray;
}

#results-container {
    font: {
        family: monospace;
        size: large;
    }
}
